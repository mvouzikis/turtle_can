/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 39.4.5 Fri May 31 16:56:22 2024.
 */

#ifndef CAN_APU_RES_DLOGGER_H
#define CAN_APU_RES_DLOGGER_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_FRAME_ID (0x191u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_FRAME_ID (0x00u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_FRAME_ID (0x502u)

/* Frame lengths in bytes. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_LENGTH (8u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_LENGTH (2u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_LENGTH (5u)

/* Extended or standard frame types. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_IS_EXTENDED (0)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_IS_EXTENDED (0)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_CYCLE_TIME_MS (30u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_CYCLE_TIME_MS (1000u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_CYCLE_TIME_MS (100u)

/* Signal choices. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_STOP_ON_CHOICE (0u)
#define CAN_APU_RES_DLOGGER_RES_STATUS_STOP_OFF_CHOICE (1u)

#define CAN_APU_RES_DLOGGER_RES_STATUS_TOGGLE_OFF_CHOICE (0u)
#define CAN_APU_RES_DLOGGER_RES_STATUS_TOGGLE_ON_CHOICE (1u)

#define CAN_APU_RES_DLOGGER_RES_STATUS_BUTTON_OFF_CHOICE (0u)
#define CAN_APU_RES_DLOGGER_RES_STATUS_BUTTON_ON_CHOICE (1u)

#define CAN_APU_RES_DLOGGER_APU_RES_INIT_REQUESTED_STATE_OPERATIONAL_CHOICE (1u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_REQUESTED_STATE_STOPPED_CHOICE (2u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_REQUESTED_STATE_PRE_OPERATIONAL_CHOICE (128u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_REQUESTED_STATE_RESET_NODE_CHOICE (129u)
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_REQUESTED_STATE_RESET_COMM_CHOICE (130u)

#define CAN_APU_RES_DLOGGER_APU_RES_INIT_ADDRESSED_NODE_RES_ADDRESS_CHOICE (17u)

#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_ASSI_STATE_OFF_CHOICE (1u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_ASSI_STATE_READY_CHOICE (2u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_ASSI_STATE_DRIVING_CHOICE (3u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_ASSI_STATE_EMERGENCY_BRAKE_CHOICE (4u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_ASSI_STATE_FINISH_CHOICE (5u)

#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_EBS_STATE_UNANAILABLE_CHOICE (1u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_EBS_STATE_ARMED_CHOICE (2u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_EBS_STATE_TRIGGERED_CHOICE (3u)

#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_ACCELERATION_CHOICE (1u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_SKIDPAD_CHOICE (2u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_TRACKDRIVE_CHOICE (3u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_BRAKETEST_CHOICE (4u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_INSPECTION_CHOICE (5u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_AUTOCROSS_CHOICE (6u)

#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_SERVICE_BRAKE_STATE_DISENGAGED_CHOICE (1u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_SERVICE_BRAKE_STATE_ENGAGED_CHOICE (2u)
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_SERVICE_BRAKE_STATE_AVAILABLE_CHOICE (3u)

/* Frame Names. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_NAME "RES_STATUS"
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_NAME "APU_RES_INIT"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_NAME "DV_SYSTEM_STATUS"

/* Signal Names. */
#define CAN_APU_RES_DLOGGER_RES_STATUS_STOP_NAME "Stop"
#define CAN_APU_RES_DLOGGER_RES_STATUS_TOGGLE_NAME "Toggle"
#define CAN_APU_RES_DLOGGER_RES_STATUS_BUTTON_NAME "Button"
#define CAN_APU_RES_DLOGGER_RES_STATUS_SIGNAL_STRENGTH_NAME "Signal_Strength"
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_REQUESTED_STATE_NAME "Requested_State"
#define CAN_APU_RES_DLOGGER_APU_RES_INIT_ADDRESSED_NODE_NAME "Addressed_Node"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_ASSI_STATE_NAME "ASSI_STATE"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_EBS_STATE_NAME "EBS_STATE"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_AMI_STATE_NAME "AMI_STATE"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_STEERING_STATE_NAME "STEERING_STATE"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_SERVICE_BRAKE_STATE_NAME "SERVICE_BRAKE_STATE"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_LAP_COUNTER_NAME "LAP_COUNTER"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_CONES_COUNT_ACTUAL_NAME "CONES_COUNT_ACTUAL"
#define CAN_APU_RES_DLOGGER_DV_SYSTEM_STATUS_CONES_COUNT_ALL_NAME "CONES_COUNT_ALL"

/**
 * Signals in message RES_STATUS.
 *
 * RES Status
 *
 * All signal values are as on the CAN bus.
 */
struct can_apu_res_dlogger_res_status_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t stop;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t toggle;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t button;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint8_t signal_strength;
};

/**
 * Signals in message APU_RES_INIT.
 *
 * A "CAN master" sends this message in order to set RES CAN into operating mode
 *
 * All signal values are as on the CAN bus.
 */
struct can_apu_res_dlogger_apu_res_init_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t requested_state;

    /**
     * ID of addressed device. 0x11 in RES's case
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t addressed_node;
};

/**
 * Signals in message DV_SYSTEM_STATUS.
 *
 * Data for the Datalogger
 *
 * All signal values are as on the CAN bus.
 */
struct can_apu_res_dlogger_dv_system_status_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t assi_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ebs_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t ami_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t steering_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t service_brake_state;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t lap_counter;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cones_count_actual;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint32_t cones_count_all;
};

/**
 * Pack message RES_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_apu_res_dlogger_res_status_pack(
    uint8_t *dst_p,
    const struct can_apu_res_dlogger_res_status_t *src_p,
    size_t size);

/**
 * Unpack message RES_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_apu_res_dlogger_res_status_unpack(
    struct can_apu_res_dlogger_res_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from RES_STATUS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can_apu_res_dlogger_res_status_init(struct can_apu_res_dlogger_res_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_res_status_stop_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_res_status_stop_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_res_status_stop_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_res_status_toggle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_res_status_toggle_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_res_status_toggle_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_res_status_button_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_res_status_button_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_res_status_button_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_res_status_signal_strength_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_res_status_signal_strength_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_res_status_signal_strength_is_in_range(uint8_t value);

/**
 * Pack message APU_RES_INIT.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_apu_res_dlogger_apu_res_init_pack(
    uint8_t *dst_p,
    const struct can_apu_res_dlogger_apu_res_init_t *src_p,
    size_t size);

/**
 * Unpack message APU_RES_INIT.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_apu_res_dlogger_apu_res_init_unpack(
    struct can_apu_res_dlogger_apu_res_init_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from APU_RES_INIT.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can_apu_res_dlogger_apu_res_init_init(struct can_apu_res_dlogger_apu_res_init_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_apu_res_init_requested_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_apu_res_init_requested_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_apu_res_init_requested_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_apu_res_init_addressed_node_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_apu_res_init_addressed_node_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_apu_res_init_addressed_node_is_in_range(uint8_t value);

/**
 * Pack message DV_SYSTEM_STATUS.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int can_apu_res_dlogger_dv_system_status_pack(
    uint8_t *dst_p,
    const struct can_apu_res_dlogger_dv_system_status_t *src_p,
    size_t size);

/**
 * Unpack message DV_SYSTEM_STATUS.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int can_apu_res_dlogger_dv_system_status_unpack(
    struct can_apu_res_dlogger_dv_system_status_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Init message fields to default values from DV_SYSTEM_STATUS.
 *
 * @param[in] msg_p Message to init.
 *
 * @return zero(0) on success or (-1) in case of nullptr argument.
 */
int can_apu_res_dlogger_dv_system_status_init(struct can_apu_res_dlogger_dv_system_status_t *msg_p);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_assi_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_assi_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_assi_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_ebs_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_ebs_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_ebs_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_ami_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_ami_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_ami_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_steering_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_steering_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_steering_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_service_brake_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_service_brake_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_service_brake_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_lap_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_lap_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_lap_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t can_apu_res_dlogger_dv_system_status_cones_count_actual_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_cones_count_actual_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_cones_count_actual_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t can_apu_res_dlogger_dv_system_status_cones_count_all_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double can_apu_res_dlogger_dv_system_status_cones_count_all_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool can_apu_res_dlogger_dv_system_status_cones_count_all_is_in_range(uint32_t value);


#ifdef __cplusplus
}
#endif

#endif
